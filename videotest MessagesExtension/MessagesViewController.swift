//
//  MessagesViewController.swift
//  videotest MessagesExtension
//
//  Created by Paul Freeman on 12/03/2018.
//  Copyright Â© 2018 Paul Freeman. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var addingStyle: UILabel!
    var addAsLayoutTemplate = true
    
    @IBAction func saveAsLayout(_ sender: Any) {
        guard let sw = sender as? UISwitch else { return }
        self.addAsLayoutTemplate = sw.isOn
        addingStyle.text = self.addAsLayoutTemplate ? "Add as MSMessagesTemplateLayout" : "Add as an attachment"
    }
    
    @IBAction func addVideo(_ sender: Any) {
        guard let path = Bundle.main.path(forResource: "SampleVideo", ofType: "MP4") else {  print("no path to resource"); return }
        let url = URL(fileURLWithPath: path) //else {  print("no path to resource") ; return }
        self.composeMessage(with: url, caption: "Sample Video")
    }
    
    /**
    * This is the part where the action will happen
    */
    fileprivate func composeMessage(with mediaUrl: URL, caption: String)   {
        
        guard let convo  = activeConversation else { print("fail no iMessage conversation"); return }
        let  session = convo.selectedMessage?.session
       
        //1. Instantiate new Layout (following exact sequence suggested in Docs)
        let layout = MSMessageTemplateLayout()
        
        //2. Assign values to the desired layout properties
        layout.mediaFileURL = mediaUrl
        layout.caption = caption
        
        let message = MSMessage(session: session ?? MSSession())
        message.url =  URL(string: "http://www.paulfreeman.com")
        
        //3. Assign the instance to the MSMessages layout property
        message.layout = layout
        
        
        //NOTE: inserting video into layout caused memory problems and crashes (and also performance problems because of too many autoplaying high res videos in current thread)
        if self.addAsLayoutTemplate {
            convo.send(message, completionHandler: { error in
                if let error = error {
                    print(error)
                }
            })
        }
        //NOTE: inserting video as an attachment does not cause any problems
        else {
            convo.sendAttachment(mediaUrl, withAlternateFilename: "Sample.MP4",  completionHandler : { error in
                if let error = error {
                    print(error)
                }
            })
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
